{"version":3,"sources":["api.ts","App.tsx","features/counter/counterAPI.ts","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["users","alice","id","displayName","bob","carol","announcements","0","submittedAt","Date","submittedBy","title","body","1","places","mndot","name","weatherForecasts","sky","tempDegrees","dewpoint","wind","precipProb","expectedPrecipInches","rideLevel","mondo","midi","routes","description","expectedMiles","expectedClimbingDifficulty","rides","meetTime","meetPlace","weatherForecast","status","leaders","route","hangouts","meetTimeDescription","series","wednesdayNightRides","groupEvents","Object","values","groupEventsByYMD","year","months","dates","date","events","Nav","user","href","className","Announcement","announcement","toLocaleString","AnnouncementList","api","map","a","Ride","ride","u","RideList","r","Hangout","hangout","HangoutList","h","GroupEvent","groupEvent","GroupEventList","e","GroupEventCalendar","y","m","d","toLocaleDateString","toISOString","Home","About","App","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","response","counterSlice","createSlice","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","store","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.78a4867c.chunk.js","sourcesContent":["// Models and examples\n// NOTE: There are bunch of examples in here that don't have interfaces yet\n\n// UUID v4 reservoir for examples:\n// 01d3586b-cc73-4672-9669-71e504abbd7d\n// 8d50e334-dbec-4fb7-a46e-04ee4ece0311\n// e014a8c5-e245-48a4-848c-a095d210bae6\n// feeefbe9-e009-45cc-ae51-df39fed4bdc4\n// 05a36b1d-0abd-4252-904f-048209aff2c1\n// 1a5dc8e0-7f29-4df8-a554-666db632ccac\n// 5327519d-2833-4689-aa51-eefa4d08a18e\n// 9b94e0eb-75f9-45a4-b45c-92cd252c219d\n// 711b6e44-1cf4-40c5-ad5e-abe6ac8800f3\n// b5ee6aa2-c1b2-4fea-9c15-8fa4e9938a2a\n// 42c57ba4-4c78-4ce1-8746-649c880309b7\n// 1ae17a12-334c-4165-8e99-d98b2c8790ef\n// 111f73d9-2972-4ff7-a7b2-8e06195f32fc\n// 7754e749-a056-42c6-8427-67b9895c1996\n// 1f0fd485-1f77-419e-aef7-999559e0fe15\n// 72d82ac2-0d45-43f8-911d-51cfdf1e20b4\n// ba96774f-baf5-4678-8ee6-da3c1aab586a\n// 2660b789-4e03-4f6d-a8e3-43fbd4e6a964\n// 9b1fab60-b165-4900-b2b9-4723b1912b0e\n// a5fd15ea-848d-4417-979b-1c346e72a679\n// 703c720b-2b9c-45b3-bd4e-00fff7fdb186\n// 122c1fb2-d579-4a11-8684-c361c89b7196\n// 2a915f19-5494-45b9-9807-2fd4c47c9ea1\n// e4849291-9df8-47b0-9d54-e31d678a7c1b\n// 61eb345b-8ebc-4285-aa27-835cbecd5374\n// d8f744c2-00f2-4a67-8ec5-cb5ff3cb0265\n// 57044439-ef1c-4fad-914a-1cb7d107af30\n// 8a6f1a2f-cdab-44ea-914b-5f5d78a03ee4\n// 9a542e72-6844-419c-96c1-b54497bcd2e1\n// 245c049b-0201-4d1d-8208-ef70b059895e\n// 8dbe772c-0e7c-4d0c-8692-142099f131bd\n// 0aa75cda-d64f-451c-9e8b-bdcde384b9d9\n// 989adfe6-bf11-4770-ae6e-6f1656006c7f\n\nexport interface User {\n  id: string;\n  displayName: string;\n}\n\nconst users: Record<string, User> = {\n  alice: {\n    id: \"191315df-2a80-46f6-977c-058b5a8719c5\",\n    displayName: \"Alice A\",\n  },\n  bob: {\n    id: \"1a31ec6c-5c02-4c16-8c2f-59c220e0a31e\",\n    displayName: \"Bob B\",\n  },\n  carol: {\n    id: \"158c5b1f-34e5-40ad-a5da-3f5da775e52a\",\n    displayName: \"Carol C\",\n  },\n};\n\nexport interface Announcement {\n  id: string;\n  submittedAt: Date;\n  submittedBy: User;\n  title: string;\n  body: string;\n}\n\nexport const announcements: Record<string, Announcement> = {\n  0: {\n    id: \"da7fcf43-830b-4776-9d0e-22c7902048b8\",\n    submittedAt: new Date(\"2021-06-05 9:00\"),\n    submittedBy: users[\"alice\"],\n    title: \"Announcement 2\",\n    body: \"Bob Loblau Law\",\n  },\n  1: {\n    id: \"96483807-83f2-42fb-8837-ccc40910edf5\",\n    submittedAt: new Date(\"2021-06-01 9:00\"),\n    submittedBy: users[\"carol\"],\n    title: \"Announcement 1\",\n    body: \"Blah blah blah blah\",\n  },\n};\n\ninterface Place {\n  id: string;\n  name: string;\n}\n\nconst places: Record<string, Place> = {\n  mndot: {\n    id: \"886f18d2-8dbe-4d5e-85e4-63f9925c6668\",\n    name: \"MnDOT\",\n    // Also, prob. a link to Google Maps or something\n  },\n};\n\ninterface WeatherForecast {\n  sky: string;\n  tempDegrees: number;\n  dewpoint: number;\n  wind: string;\n  precipProb: number;\n  expectedPrecipInches: number;\n}\n\nconst weatherForecasts: Record<string, WeatherForecast> = {\n  0: {\n    // Maybe just start with the forecast for the meet place and get fancier\n    // with using route data (probably much) later\n    sky: \"Sunny\",\n    tempDegrees: 65,\n    dewpoint: 50,\n    wind: \"E 1 mph\",\n    precipProb: 5,\n    expectedPrecipInches: 0.01,\n  },\n};\n\ninterface RideLevel {\n  id: string;\n  name: string;\n}\n\nconst rideLevel: Record<string, RideLevel> = {\n  mondo: {\n    id: \"08508be8-7850-4792-a7af-3b47fb1e6e6e\",\n    name: \"Mondo\",\n  },\n  midi: {\n    id: \"412e88e3-4358-4ac3-83f1-fac665cb3c20\",\n    name: \"Midi\",\n  },\n};\n\ninterface Route {\n  id: string;\n  name: string;\n  description: string;\n  expectedMiles: number;\n  expectedClimbingDifficulty: \"easy\" | \"medium\" | \"hard\";\n}\n\nconst routes: Record<string, Route> = {\n  0: {\n    id: \"be819e33-1510-4ab4-867d-bccd8d6c1794\",\n    name: \"Route A\",\n    description: \"A route description\",\n    expectedMiles: 50,\n    expectedClimbingDifficulty: \"hard\",\n    // Also prob link to the route or something fancier\n  },\n  1: {\n    id: \"30e14365-af7b-4907-9ff9-c509f4e78286\",\n    name: \"Route B\",\n    description: \"Another route description\",\n    expectedMiles: 30,\n    expectedClimbingDifficulty: \"easy\",\n  },\n};\n\ntype Event = {\n  // An abstract event -- cf. a GroupEvent which is defined below\n  id: string;\n  title: string;\n  meetPlace: Place;\n  description: string;\n} & (\n  | { meetTime: Date; meetTimeDescription?: never }\n  | { meetTime?: never; meetTimeDescription: string }\n);\n\nexport type Ride = Event & {\n  weatherForecast: WeatherForecast;\n  status: \"planned\" | \"tentative\" | \"confirmed\";\n  rideLevel: RideLevel;\n  leaders: User[];\n  route: Route;\n};\n\nconst rides: Record<string, Ride> = {\n  0: {\n    id: \"0b3117e1-4309-4c46-84ad-bd25ecadf708\",\n    title: \"A Mondo Ride\",\n    meetTime: new Date(\"2021-07-01 16:30\"),\n    meetPlace: places[\"mndot\"],\n    description: \"A ride description\",\n    weatherForecast: weatherForecasts[0],\n    status: \"tentative\",\n    rideLevel: rideLevel[\"mondo\"],\n    leaders: [users[\"alice\"], users[\"bob\"]],\n    route: routes[0],\n  },\n  1: {\n    id: \"284d7258-ad88-454d-b8a6-e09589d0742e\",\n    title: \"A Midi Ride\",\n    meetTime: new Date(\"2021-07-01 16:45\"),\n    meetPlace: places[\"mndot\"],\n    weatherForecast: weatherForecasts[0],\n    status: \"confirmed\",\n    description: \"Another ride description\",\n    rideLevel: rideLevel[\"midi\"],\n    leaders: [users[\"carol\"]],\n    route: routes[1],\n  },\n};\n\nexport type Hangout = Event & {};\n\nconst hangouts: Record<string, Hangout> = {\n  0: {\n    id: \"e41c27c6-7f10-49d3-9b26-07cf3556f3d6\",\n    title: \"Trivia Night\",\n    meetTimeDescription: \"After the rides\",\n    description: \"Come drink with us!\",\n    meetPlace: {\n      id: \"d31473b3-dcdf-42b4-9816-f4b3ae8d9555\",\n      name: \"Tin Whiskers\",\n    },\n  },\n};\n\ninterface Series {\n  id: string;\n  name: string;\n  description?: string;\n}\n\nconst series: Record<string, Series> = {\n  wednesdayNightRides: {\n    id: \"5cdc401c-313e-479e-8ec6-5adf84a78027\",\n    name: \"Wednesday Night Rides\",\n  },\n};\n\nexport interface GroupEvent {\n  id: string;\n  title: string;\n  series: Series;\n  rides: Ride[];\n  hangouts: Hangout[];\n}\n\nconst groupEvents: Record<string, GroupEvent> = {\n  0: {\n    id: \"951badf6-ab50-41f5-8320-1f4ea1f437d5\",\n    title: \"Wednesday Night Ride\",\n    series: series[\"wednesdayNightRides\"],\n    rides: Object.values(rides),\n    hangouts: Object.values(hangouts),\n  },\n  1: {\n    id: \"Not 951badf6-ab50-41f5-8320-1f4ea1f437d5\",\n    title: \"A Temporary Copypasta of the Other Event for Illustration\",\n    series: series[\"wednesdayNightRides\"],\n    rides: Object.values(rides),\n    hangouts: Object.values(hangouts),\n  },\n  // TODO: delete the copypasta + more event examples (e.g. Prudhomme)\n};\n\nexport const groupEventsByYMD = [\n  {\n    year: 2021,\n    months: [\n      {\n        name: \"July\",\n        dates: [\n          {\n            date: new Date(\"2021-07-01\"),\n            events: [groupEvents[0], groupEvents[1]],\n          },\n        ],\n      },\n    ],\n  },\n];\n","import * as api from \"./api\";\n\ninterface NavProps {\n  user: api.User | null;\n}\nfunction Nav({ user }: NavProps) {\n  return (\n    <nav>\n      <a href=\"#!\" className=\"text-blue-200\">\n        [Cap U logo]\n      </a>\n      <ul>\n        <li>\n          <a href=\"#!\">A link</a>\n        </li>\n        <li>\n          <a href=\"#!\">Another link</a>\n        </li>\n      </ul>\n\n      {user ? (\n        <>\n          {user.displayName}\n          <button>Sign out</button>\n        </>\n      ) : (\n        <>\n          <button>Sign in</button>\n        </>\n      )}\n    </nav>\n  );\n}\n\ninterface AnnouncementProps {\n  announcement: api.Announcement;\n}\nfunction Announcement({ announcement }: AnnouncementProps) {\n  return (\n    <>\n      <div>{announcement.title}</div>\n      <div>\n        Submitted {announcement.submittedAt.toLocaleString()} by{\" \"}\n        {announcement.submittedBy.displayName}\n      </div>\n\n      <div>{announcement.body}</div>\n    </>\n  );\n}\n\nfunction AnnouncementList() {\n  return (\n    <ul>\n      {Object.values(api.announcements).map((a) => (\n        <li key={a.id}>\n          <Announcement announcement={a} />\n        </li>\n      ))}\n    </ul>\n  );\n}\n\n// NOTE: These groupEvents/rides/hangouts are all /planned/ ones -- they'll have to\n//       be distinguished from their (possibly non-existant) actuals at some\n//       point.\n\ninterface RideProps {\n  ride: api.Ride;\n}\nfunction Ride({ ride }: RideProps) {\n  return (\n    <>\n      <div>\n        {ride.rideLevel.name}: {ride.title}\n      </div>\n      <div>\n        {ride.meetTime?.toLocaleString() || ride.meetTimeDescription} at{\" \"}\n        {ride.meetPlace.name}\n      </div>\n\n      <p>{ride.description}</p>\n\n      <dl>\n        <dt>Status:</dt>\n        <dd>{ride.status}</dd>\n\n        <dt>Route:</dt>\n        <dd>\n          <div>{ride.route.name}</div>\n          <div>{ride.route.description}</div>\n          <dl>\n            <dt>Expected distance:</dt>\n            <dd>(about {ride.route.expectedMiles} miles)</dd>\n\n            <dt>Expected Climbing difficulty:</dt>\n            <dd>{ride.route.expectedClimbingDifficulty}</dd>\n          </dl>\n        </dd>\n\n        <dt>Ride leaders:</dt>\n        <dd>\n          <ul>\n            {ride.leaders.map((u) => (\n              <li key={u.id}>{u.displayName}</li>\n            ))}\n          </ul>\n        </dd>\n      </dl>\n    </>\n  );\n}\n\ninterface RideListProps {\n  rides: api.Ride[];\n}\nfunction RideList({ rides }: RideListProps) {\n  return (\n    <ul>\n      {rides.map((r) => (\n        <li key={r.id}>\n          <Ride ride={r} />\n        </li>\n      ))}\n    </ul>\n  );\n}\n\ninterface HangoutProps {\n  hangout: api.Hangout;\n}\nfunction Hangout({ hangout }: HangoutProps) {\n  return (\n    <>\n      <div>{hangout.title}</div>\n      <div>\n        {hangout.meetTime?.toLocaleString() || hangout.meetTimeDescription} at{\" \"}\n        {hangout.meetPlace.name}\n      </div>\n\n      <p>{hangout.description}</p>\n    </>\n  );\n}\n\ninterface HangoutListProps {\n  hangouts: api.Hangout[];\n}\nfunction HangoutList({ hangouts }: HangoutListProps) {\n  return (\n    <ul>\n      {hangouts.map((h) => (\n        <li key={h.id}>\n          <Hangout hangout={h} />\n        </li>\n      ))}\n    </ul>\n  );\n}\n\ninterface GroupEventProps {\n  groupEvent: api.GroupEvent;\n}\nfunction GroupEvent({ groupEvent }: GroupEventProps) {\n  return (\n    <>\n      <div>{groupEvent.title}</div>\n\n      <dl>\n        <dt>Event series:</dt>\n        <dd>{groupEvent.series.name}</dd>\n      </dl>\n\n      <dl>\n        <dt>Event Rides: </dt>\n        <dd>\n          <RideList rides={groupEvent.rides} />\n        </dd>\n\n        <dt>Event Hangouts: </dt>\n        <dd>\n          <HangoutList hangouts={groupEvent.hangouts} />\n        </dd>\n      </dl>\n    </>\n  );\n}\n\ninterface GroupEventListProps {\n  groupEvents: api.GroupEvent[];\n}\nfunction GroupEventList({ groupEvents }: GroupEventListProps) {\n  return (\n    <ul>\n      {Object.values(groupEvents).map((e) => (\n        <li key={e.id}>\n          <GroupEvent groupEvent={e} />\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nfunction GroupEventCalendar() {\n  return (\n    <ul>\n      {api.groupEventsByYMD.map((y) => (\n        <li key={y.year}>\n          {y.year}\n          <ul>\n            {y.months.map((m) => (\n              <li key={m.name}>\n                {m.name}\n                <ul>\n                  {m.dates.map((d) => (\n                    <li key={d.date.toISOString()}>\n                      {d.date.toLocaleDateString()}\n                      <GroupEventList groupEvents={d.events} />\n                    </li>\n                  ))}\n                </ul>\n              </li>\n            ))}\n          </ul>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nfunction Home() {\n  return (\n    <>\n      <h2>Announcements</h2>\n      <AnnouncementList />\n\n      <h2>Event Calendar</h2>\n      <GroupEventCalendar />\n    </>\n  );\n}\n\nfunction About() {\n  return <>Cap U is such and such...</>;\n}\n\nfunction App() {\n  const user = { id: \"asdf\", displayName: \"Test User\" };\n\n  return (\n    <>\n      <Nav user={user} />\n\n      <h1>Home Page</h1>\n      <Home />\n\n      <h1>About Page</h1>\n      <About />\n    </>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount: number): AppThunk => (\n  dispatch,\n  getState\n) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}